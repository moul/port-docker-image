#!/bin/bash

set -e

if [ "$DEBUG" = "1" ];then set -x; fi

usage() {
    echo "Usage: $0 -i image-name [-r repo_name] [-b branch] [-d sub/directory] [-f FROM] [-a ARCH]"
    exit 1
}

contains() {
    [[ $1 =~ $2 ]] && exit 0 || exit 1
}

convert_from() {
    tr "/" "-" | sed 's|^|armbuild/|'
}

while getopts ":i:r:b:p:a:f:h" opt; do
    case $opt in
	i)
	    IMAGE="$OPTARG"
	    ;;
	r)
	    REPO="$OPTARG"
	    ;;
	p)
	    PATH="$OPTARG"
	    ;;
	b)
	    BRANCH="$OPTARG"
	    ;;
	a)
	    ARCH="$OPTARG"
	    ;;
	f)
	    FROM="$OPTARG"
	    ;;
	h)
	    usage
	    ;;
	\?)
	    echo "Invliad otion $OPTARG" >&2
	    exit 1
	    ;;
	:)
	    echo "Option s-$OPTARG requires an argument." >&2
	    exit 1
	    ;;
    esac
done

if [[ -z "$IMAGE" ]]; then usage; fi
BRANCH=${BRANCH:-master}
SUBDIR=${SUBDIR:-/}
ARCH=${ARCH:-$(uname -m)}
if ( contains "armv7l" "$ARCH" ); then ARCH="armhf"; fi
BUILDDIR=$(mktemp -d /tmp/port_docker_image.XXXXXXXXXX)
echo $BUILDDIR

DONE=0
for repo in $REPO $IMAGE $(echo $IMAGE | sed 's|/|/docker-|'); do
    curl -sL https://github.com/$repo/archive/$BRANCH.tar.gz \
	| tar --strip-components=1 -C $BUILDDIR -xzf - \
	&& DONE=1 && break || true
done
if [ "$DONE" = "0" ]; then
    echo "Cannot find Github repo." >&2
    exit 1
fi

cd $BUILDDIR/$SUBDIR

# Patch Dockerfile
DOCKERFILE_FROM=$(cat Dockerfile | grep -i ^FROM | awk '{print $2}' | convert_from)
FROM=${FROM:-$DOCKERFILE_FROM}
sed -i "s|^[fF][rR][oO][mM].*|FROM $FROM|" Dockerfile
for old_arch in amd64 x86_64 i386 x86; do
    sed -i "s|$old_arch|$ARCH|g" Dockerfile
done

if [ "$DEBUG" = "1" ]; then cat Dockerfile; fi

docker build -t $IMAGE .
docker tag $IMAGE $(echo $IMAGE | convert_from)
